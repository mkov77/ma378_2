{
  "hash": "72afa3b702250e0abb4dbeab12a0f482",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Model\"\nformat:\n  html:\n    code-fold: true\n---\n\n::: {#933f6cd4 .cell execution_count=1}\n``` {.python .cell-code}\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing\nfrom pins import board_folder\n```\n:::\n\n\n## Get Data\n\n::: {#1c70dd80 .cell execution_count=2}\n``` {.python .cell-code}\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Define Model and Fit\n\n::: {#0d4b3530 .cell execution_count=3}\n``` {.python .cell-code}\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n```\n:::\n\n\n## Get some information\n\n::: {#142840a6 .cell execution_count=4}\n``` {.python .cell-code}\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR^2 0.8555368759537614\nIntercept 2169.2697209393973\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n```\n:::\n:::\n\n\n## VetiverModel\n\n::: {#5abb0211 .cell execution_count=5}\n``` {.python .cell-code}\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)\n```\n:::\n\n\n``` {.python .cell-code}\nb = board_folder('data/model')\nb.pin_write(v, 'penguin_model', type=\"model\")\n```\n\n::: {#9eff23f4 .cell execution_count=6}\n``` {.python .cell-code}\nimport pickle\n\n# Save the model to a file\nwith open('penguin_model.pkl', 'wb') as file:\n    pickle.dump(model, file)\n```\n:::\n\n\n::: {#3be40884 .cell execution_count=7}\n``` {.python .cell-code}\nfrom pins import board_folder\n\n# Assuming the board_folder has been set up correctly\nb = board_folder('data/model')\n\n# Pin the model file\nb.pin_upload('penguin_model.pkl', name='penguin_model')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWriting pin:\nName: 'penguin_model'\nVersion: 20240423T203029Z-3a563\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nMeta(title='penguin_model: a pinned str object', description=None, created='20240423T203029Z', pin_hash='3a563f089968e97b', file='penguin_model.pkl', file_size=625, type='file', api_version=1, version=Version(created=datetime.datetime(2024, 4, 23, 20, 30, 29, 114958), hash='3a563f089968e97b'), tags=None, name='penguin_model', user={}, local={})\n```\n:::\n:::\n\n\n",
    "supporting": [
      "model_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}